#
# Specify the name and context of the view store that this projection maps to.
#
name: dashboard
# context: some-context

#
# Set the events that this projection listens to.
#
events:
  - domain: bird
    service: animals
    actions:
      - chirp

#
# Optionally set the stores that should be replayed when `blossm replay` is triggered.
# If omitted, all stores specified above will replay.
#
# replay:
#   - domain: some-event-domain
#     service: some-event-service
#
# The following properties are used for automated testing.
#
testing:
  #
  # Add tests for your handlers here.
  #
  # The 'event' property specifies which handler is being tested.
  # The 'examples' property is an array of instructions
  # with 'state', 'root', 'action', 'readFact' and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  # the event is applied. The 'action' property specifies the action,
  # the 'id' property corresponds to the root,
  # and the 'result' property specifies the expected state once the event is applied.
  #
  # The readFact property takes an array of 'calls', each of which represents an instance
  # that the readFactFn may have been called. Pass a 'params' property that includes the expected
  # params passed to the readFactFn, and a 'returns' property set to what you want it to return.
  # may
  #
  # You can omit the 'state' property if the event payload entirely
  # overwrites the state of the aggregate.
  #
  handlers:
    - event:
        domain: bird
        service: animals
      examples:
        - action: chirp
          id: some-id
          state:
            volume: 1
            sound: cawwwcawww
          result:
            id: some-id
            update:
              sound: cawwwcawww
        - action: chirp
          id: some-id
          state:
            volume: 5
            sound: cawwwcawww
          result:
            id: some-id
            update:
              sound: CAWWWCAWWW!
  #
  # Add steps to run integration tests for.
  #
  # The 'pre' property is an array of instructions that allow you to set up the event state
  # of the system before the integration test runs. For example, you can add an event to
  # an event-store by setting the 'domain' and 'service' property to the domain and service
  # of the event-store that you want to modify the state of, 'root' and 'action' to the root
  # and action that describe the event, and 'payload' to the payload of the event that is
  # being added.
  #
  # The 'event' property specifies which handler is being tested.
  #
  # The 'root' property specifies the root of the event being projected.
  #
  # The 'payload' property is the payload of the event being projected.
  # with 'state', 'payload', and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  #
  # The 'result' property contains instructions for checking what got projected.
  # Specify a 'query' to, and either 'value' or 'values', depending on whether a
  # single object or an array of objects is expected.
  #
  steps:
    - pre:
      event:
        action: chirp
        domain: bird
        service: animals
      payload:
        volume: 1
        sound: piuiupiu
      result:
        query: {}
        values:
          - body:
              sound: piuiupiu

#don't change
procedure: projection
