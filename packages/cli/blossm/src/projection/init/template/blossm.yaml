#
# Specify the name and context of this projection.
#
name: some-name
context: some-context

#
# Set the event-store from which this projection will listen for events.
#
stores:
  - domain: some-event-domain
    service: core
    actions:
      - some-action

#
# Add dependencies and devDependencies, just like a package.json file.
#
devDependencies:

#
# The following properties are used for automated testing.
#
testing:
  #
  # Add tests for your handlers here.
  #
  # The 'action' property specifies which handler is being tested.
  # The 'examples' property is an array of instructions
  # with 'state', 'event', and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  # the event is applied. The 'event' property specifies the event,
  # and the 'result' property specifies the expected state once the event is applied.
  #
  # You can omit the 'state' property if the event payload entirely
  # overwrites the state of the aggregate.
  #
  handlers:
    - action: register
      examples:
        - event:
            payload:
              name: some-name
          result:
            body:
              name: some-name
  #
  # Add examples to run integration tests for.
  #
  # The 'action' property specifies which handler is being tested.
  #
  # The 'root' property specifies the root of the event being projected.
  #
  # The 'payload' property is the payload of the event being projected.
  # with 'state', 'payload', and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  #
  # The 'result' property contains instructions for checking what got projected.
  # Specify a 'query' to, and either 'value' or 'values', depending on whether a
  # single object or an array of objects is expected.
  #
  examples:
    - action: some-action
      root: some-root
      payload:
        name: some-name
      result:
        query: {}
        value:
          name: some-name

#don't change
procedure: projection
