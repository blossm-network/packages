#
# Specify the name and context of this projection.
#
name: some-name
context: some-context

#
# Set the events that this projection listens to.
#
events:
  - domain: some-event-domain
    service: core
    actions:
      - some-action

#
# Optionally set the stores that should be replayed when `blossm replay` is triggered.
# If omitted, all stores specified above will replay.
#
replay:
  - domain: some-event-domain
    service: core
#
# The following properties are used for automated testing.
#
testing:
  #
  # Add tests for your handlers here.
  #
  # The 'event' property specifies which handler is being tested.
  # The 'examples' property is an array of instructions
  # with 'state', 'event', and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  # the event is applied. The 'event' property specifies the event,
  # and the 'result' property specifies the expected state once the event is applied.
  #
  # You can omit the 'state' property if the event payload entirely
  # overwrites the state of the aggregate.
  #
  handlers:
    - event:
        action: register
        domain: some-domain
        service: some-service
      examples:
        - state:
            name: some-name
          readFact:
            calls:
              - calledWith:
                returns:
          result:
            update:
              name: some-name
  #
  # Add examples to run integration tests for.
  #
  # The 'pre' property is an array of instructions that allow you to set up the event state
  # of the system before the integration test runs. For example, you can add an event to
  # an event-store by setting the 'domain' and 'service' property to the domain and service
  # of the event-store that you want to modify the state of, 'root' and 'action' to the root
  # and action that describe the event, and 'payload' to the payload of the event that is
  # being added.
  #
  # The 'event' property specifies which handler is being tested.
  #
  # The 'root' property specifies the root of the event being projected.
  #
  # The 'payload' property is the payload of the event being projected.
  # with 'state', 'payload', and 'result' properties.
  #
  # The 'state' property specifies the state of the aggregate before
  #
  # The 'result' property contains instructions for checking what got projected.
  # Specify a 'query' to, and either 'value' or 'values', depending on whether a
  # single object or an array of objects is expected.
  #
  examples:
    - pre:
      event:
        action: some-action
        domain: some-domain
        service: some-service
      payload:
        name: some-name
      result:
        query: {}
        values:
          - name: some-name

#don't change
procedure: projection
